[{"title":"理解设计模式（一）： 适配器模式","url":"/2018/07/03/理解设计模式（一）：-适配器模式/","content":"\n### 前言\n\n本系列博客是博主在阅读 [java-design-patterns](https://github.com/iluwatar/java-design-patterns) 时的一些记录或者说是翻译，当前是[第一篇。](http://java-design-patterns.com/patterns/adapter/)\n\n### Also Known as\n\nWrapper，适配器模式也被称作包装模式\n\n### 目的\n\n将一个类的接口转换成另外一个客户端需要的接口。适配器让各种类可以完美地契合在一起，而不用因为不适配的接口而放弃或者重新编写功能相同接口不同的类。\n\n### 解释一下下\n\n#### 真实的案例\n\n假设你的sd卡中有一些特定的图像，你想要将其放到你的电脑上。为了把图片存到电脑上，首先要把sd卡插到电脑上，这里你需要某种适配器兼容你的电脑端口，这个案例中就是读卡器了。另一个案例就比较出名了，我们平时经常用到的电源适配器。一个三脚的插头插不进两脚的插座里，这个时候就需要有一个适配器来兼容两脚插座。另一个案例就是把一种语言翻译成另一种语言的翻译机了。\n\n> Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter. Another example would be the famous power adapter; a three legged plug can't be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two pronged outlet. Yet another example would be a translator translating words spoken by one person to another\n\n### 直白地说\n\n适配器模式让你把别的不兼容的事物包装在一个适配器中让其能和其他的类兼容\n> Adapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.\n\n### 维基百科上说\n\n 在软件工程中,适配器模式是一种允许其他接口使用现存的类的接口。常见的用法是将现有的类和其他的类联动但不改动这些类的源码。\n> In software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.\n\n### 编程实例\n\n以下内容直接翻译，[原文](http://java-design-patterns.com/patterns/adapter/)请自行查看。\n\n---\n\n假设一个船长只能划船不能用船帆。\n\n首先，我们有两个接口 `RowingBoat` 和`FishingBoat`\n\n```java\npublic interface RowingBoat {\n  void row();\n}\n\npublic class FishingBoat {\n  private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoat.class);\n  public void sail() {\n    LOGGER.info(\"The fishing boat is sailing\");\n  }\n}\n```\n\n这时船长希望有一个`RowingBoat` 的实现类让船可以动起来。\n\n```java\npublic class Captain implements RowingBoat {\n\n  private RowingBoat rowingBoat;\n\n  public Captain(RowingBoat rowingBoat) {\n    this.rowingBoat = rowingBoat;\n  }\n\n  @Override\n  public void row() {\n    rowingBoat.row();\n  }\n}\n```\n\n假设这个时候来了一帮海盗，船长要逃不然就要被抓住了。可惜的是，现在只有几艘钓鱼船。我们需要给船长开渔船的能力，这个时候需要一个适配器来允许船长用刚刚上面创建的划船能力来操作渔船。\n\n```java\npublic class FishingBoatAdapter implements RowingBoat {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoatAdapter.class);\n\n  private FishingBoat boat;\n\n  public FishingBoatAdapter() {\n    boat = new FishingBoat();\n  }\n\n  @Override\n  public void row() {\n    boat.sail();\n  }\n}\n```\n\n现在，船长可以用`FishingBoat` 逃离海盗啦。\n\n```java\nCaptain captain = new Captain(new FishingBoatAdapter());\ncaptain.row();\n```\n\n### 适用范围\n\n以下几种情况都可以使用适配器模式:\n\n* 你想使用一个存在的类\n\n\n\n"},{"title":"Leetcode刷题(2)","url":"/2018/05/04/solution2/","content":"\n#### 两数相加\n\n---\n\n给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n```\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```\n\n---\n\n下面为我的解决代码:\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode result = null;\n            ListNode nextNode = null;\n\n            int sum= l1.val+l2.val;\n            int promotion = sum/10;\n            sum =sum-promotion*10;\n            result = new ListNode(sum);\n            \n            \n            int i = 0;\n            int j = 0;\n            while(l1.next!=null||l2.next!=null||promotion>0){\n               \n               \n                if (l1.next == null){\n                    i=0;\n                }else {\n                    l1 = l1.next;\n                    i=l1.val;\n                }\n                if (l2.next == null){\n                    j=0;\n                }else {\n                    l2 = l2.next;\n                    j=l2.val;\n                }\n                sum = i+j+promotion;\n                promotion = sum/10;\n                sum =sum-promotion*10;\n                if (nextNode ==null){\n                    nextNode = new ListNode(sum);\n                    result.next = nextNode;\n                }else {\n                  nextNode.next = new ListNode(sum);\n                    nextNode = nextNode.next;\n                }\n               \n                \n            }\n            if (promotion>0){\n                nextNode.next = new ListNode(promotion);\n            }\n            return result;\n    }\n}\n```\n","tags":["算法"],"categories":["Leetcode"]},{"title":"Leetcode刷题(1)","url":"/2018/05/04/Leetcodes刷题-1/","content":"\n#### 两数之和\n\n---\n\n给定一个整数数组和一个目标值，找出数组中和为目标值的**两个**数。\n\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n---\n\n下面为我的解决代码:\n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int length = nums.length;\n        for(int i =0;i<length;i++){\n            for(int j=i+1;j<length;j++){\n                if(nums[i]+nums[j]==target){\n                    return new int[]{i,j};\n                }\n            }\n        }\n        return new int[2];\n    }\n}\n```\n\n","tags":["算法"],"categories":["Leetcode"]},{"title":"NPM错误","url":"/2016/04/23/ npm错误/","content":"当执行 npm install 的时候，出现下面的错误：\n\n```js\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module '/usr/local/lib/node_modules/npm/bin/node_modules/npm/bin/npm-cli.js'\n    at Function.Module._resolveFilename (module.js:338:15)\n    at Function.Module._load (module.js:280:25)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:929:3\n```\n\n可行的解决方法是执行\n\n```shell\nnpm install -g grunt-cli\t\n```\n\n上述问题出现的前提是 npm 的版本太低，我在执行了` npm i npm` 后，并删除了 `/usr/local/bin` 目录下的对应 ` npm` 目录，并将上述执行命令后生成的最新版本的` npm` 拷贝至`/usr/local/bin/` 。此时，执行`npm` 或者`cnpm` 都会报错。"},{"title":"『解决』加载速度慢的问题（可能只有国内才会这样吧）","url":"/2016/04/23/『解决』加载速度慢的问题（可能只有国内才会这样吧）/","content":"------\n__ 博文原地址：__ [The Bloom of Youth | 锦瑟华年](http://kuangqi.me/tricks/hexo-optimizations-for-mainland-china/)\n\n>  ** Hexo** 博客系统的作者来自台湾，因此在这个系统中也使用了一些不符合大陆实际情况的服务，除了留言板、分享按钮等无关大雅的东西之外，直接影响网站打开速度和呈现效果的东西就是来自Google的字体和JavaScript库了，由于Google在大陆基本处于被阻断的状态，所以我们有必要对其中涉及Google服务的地方进行替换。另外，如果使用Windows系统访问，会发现页面上的字体默认为宋体，丑陋的字体也严重影响了访客浏览的体验，我们也需要对跨平台的字体呈现效果进行优化。\n\n> ** Hexo** 的Landscape主题对Google的引用主要有2个，第一是使用了在Google上托管的jQuery库，第二是使用了Google的Source Code Pro字体。在Google被封锁后，大部分网友推荐使用360的CDN，也就是useso.com的库，但我经过测试后发现360的CDN在国外的访问速度极慢。网友之所以推荐360的CDN，是因为它可以简单的直接替换Google的服务，只需要改一下域名，URL的其余部分都无需改动。而我发现提供jQuery的国内互联网厂商比比皆是，而提供Google Code Pro字体的除了360还没有找到。因此我希望能够将这两个问题分别解决，而不是用useso一替换了之。\n\n### jQuery库的优化\n\n国内提供jQuery的互联网公司很多，大家耳熟能详的互联网公司基本都免费提供了常用JS库的CDN加速服务。在我的测试中，百度的服务的速度在国内国外都比较理想，因此这里将jQuery替换成百度的。另外，我还希望在百度的服务暂时不可用时，能够以网站上自带的jQuery作为备份。\n\n我们要修改的是themes/landscape/layout/_partial/after-footer.ejs\n这个文件，将17行的\n```javascript\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n替换为如下代码：\n\n<script src=\"http://apps.bdimg.com/libs/jquery/2.0.3/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\nif (typeof jQuery == 'undefined') {\ndocument.write(unescape(\"%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E\"));\n}\n// ]]>\n</script>\n```\n这里不但将Google的jQuery替换成了百度的，随后还进行了一个判断，如果获取百度的jQuery失败，则使用本网站自己的jQuery。为了让这段代码有效，我们要去jQuery官方下载合适版本的jQuery并将其放到themes/landscape/source/js/目录下，我将其命名为jquery-2.0.3.min.js。\n\n还有一点需要特别注意，那就是jQuery这个文件在hexo生产博客时会被解析，因此一定要将jQuery文件开头处的//@ sourceMappingURL=jquery-2.0.3.min.map这一行代码删去，否则会导致博客无法生成。\n\n### 跨平台字体优化\n\n为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是\nthemes/landscape/source/css/_variables.styl这一文件，将其中第22行\n\n```\nfont-sans = \"Helvetica Neue\", Helvetica, Arial, sans-serif\n```\n改成如下内容：\n```\nfont-sans = \"Helvetica Neue\", \"Helvetica\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Source Han Sans CN\", \"WenQuanYi Micro Hei\", Arial, sans-serif\n```\n其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。\n\n### 代码等宽字体优化\n\nHexo默认的等宽字体是Google的Source Code Pro，我认为为了一个等宽字体去牺牲网站的访问速度实在是有点不值得，而且系统中也会提供一些较为美观的等宽字体。所以相比于绞尽脑汁去获取Google的等宽字体，不如弃用这个在国内残念的字体，然后用与之前类似的方法来列出备选的系统自带字体。要编辑的文件同样是themes/landscape/source/css/_variables.styl这一文件，将其中第24行\n```\nfont-mono = \"Source Code Pro\", Consolas, Monaco, Menlo, Consolas, monospace\n```\n改成如下内容：\n```\nfont-mono = Consolas, Monaco, Menlo, monospace\n```\n最后我们要删除引用Google字体的代码，要编辑的文件是themes/landscape/layout/_partial/head.ejs(原文是after-footer.ejs)，将其中的下列代码删除。\n```\n<link href=\"http://fonts.googleapis.com/css?family=Source+Code+Pro\" rel=\"stylesheet\" type=\"text/css\">\n```\n重新生成博客，一切都和谐了。\n"},{"title":"My First Blog","url":"/2016/04/23/My-First-Blog/","content":"# Alright let my test it.\n\nThis is a blog which I use to practice my English and MD skill.\n ```java\n  public static void main(String[] args) {\n   System.out.println(\"Hello World!\");\n   System.out.println(\"Wow , It Works!\");\n\n }\n  ```\n  >quote,yes Works too.\n\n*斜的！*\n**粗的**\n\nso much for today.\n# 底下为网上找的一篇文章，有很多不能实现的功能，此处为测试md，慢慢学习\n## 欢迎使用 Cmd Markdown 编辑阅读器\n\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n"}]